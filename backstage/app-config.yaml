app:
  title: Scaffolded Backstage App
  baseUrl: ${APP_BASE_URL}

  analytics:
    ga4:
      measurementId: ${GA_MEASUREMENT_ID}
      contentGrouping: pluginId
      allowedContexts: [ 'pluginId' ]
#      debug: true # Logs analytics event to the web console
#      testMode: true # Prevents data being sent to GA

organization:
  name: ${ORG_NAME}

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: ${APP_PORT}
    host: ${APP_HOST}
  csp:
    connect-src: [ "'self'", 'http:', 'https:' ]
    img-src: [
      "'self'",
      'data:',
      'https://avatars.githubusercontent.com',
      'https://img.shields.io',
      'https://www.google-analytics.com'
    ]
    script-src:
      [
        "'self'",
        "'unsafe-eval'",
        'https://www.google-analytics.com',
        'https://www.googletagmanager.com',
      ]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${APP_BASE_URL}
    methods: [ GET, HEAD, PATCH, POST, PUT, DELETE ]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
#    client: pg
#    connection:
#      host: ${POSTGRES_HOST}
#      port: ${POSTGRES_PORT}
#      user: ${POSTGRES_USER}
#      password: ${POSTGRES_PASSWORD}
#    prefix: 'example_prefix_'
    # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
    # https://node-postgres.com/features/ssl
    # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
    # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
    # ssl:
    #   ca: # if you have a CA file and want to verify it you can uncomment this section
    #     $file: <file-path>/ca/server.crt
    # Refer to Tarn docs for default values on PostgreSQL pool configuration - https://github.com/Vincit/tarn.js
#    knexConfig:
#      pool:
#        min: 3
#        max: 12
#        acquireTimeoutMillis: 60000
#        idleTimeoutMillis: 60000

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}

proxy:
  endpoints:
    '/sentry/api':
      target: https://sentry.io/api/
      allowedMethods: [ 'GET' ]
      headers:
        Authorization: Bearer ${SENTRY_TOKEN}
    '/newrelic/apm/api':
      target: https://api.eu.newrelic.com/v2/
      headers:
        X-Api-Key: ${NEW_RELIC_REST_API_KEY}
      allowedHeaders:
        - link
    '/newrelic/api':
      target: https://api.eu.newrelic.com/
      headers:
        X-Api-Key: ${NEW_RELIC_USER_KEY}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  generator:
    # techdocs.generator.runIn can be either 'docker' or 'local'. This is to determine how to run the generator - whether to
    # spin up the techdocs-container docker image or to run mkdocs locally (assuming all the dependencies are taken care of).
    # You want to change this to 'local' if you are running Backstage using your own custom Docker setup and want to avoid running
    # into Docker in Docker situation. Read more here
    # https://backstage.io/docs/features/techdocs/getting-started/#disabling-docker-in-docker-situation-optional
    runIn: 'local' # Alternatives - 'docker'

    # (Optional) techdocs.generator.dockerImage can be used to control the docker image used during documentation generation. This can be useful
    # if you want to use MkDocs plugins or other packages that are not included in the default techdocs-container (spotify/techdocs).
    # NOTE: This setting is only used when techdocs.generator.runIn is set to 'docker'.
    dockerImage: 'spotify/techdocs:1.2.6'

    # (Optional) techdocs.generator.pullImage can be used to disable pulling the latest docker image by default. This can be useful when you are
    # using a custom techdocs.generator.dockerImage and you have a custom docker login requirement. For example, you need to login to
    # AWS ECR to pull the docker image.
    # NOTE: Disabling this requires the docker image was pulled by other means before running the techdocs generator.
    pullImage: true

    mkdocs:
      # (Optional)  techdocs.generator.omitTechdocsCoreMkdocsPlugin can be used to disable automatic addition of techdocs-core plugin to the mkdocs.yaml files.
      # Defaults to false, which means that the techdocs-core plugin is always added to the mkdocs file.
      omitTechdocsCorePlugin: false

      # (Optional and not recommended) Configures the techdocs generator to
      # attempt to ensure an index.md exists falling back to using <docs-dir>/README.md
      # or README.md in case a default <docs-dir>/index.md is not provided.
      # Note that https://www.mkdocs.org/user-guide/configuration/#edit_uri behavior
      # will be broken in these scenarios.
      legacyCopyReadmeMdToIndexMd: false

      # (Optional) Configures the default plugins which should be added
      # automatically to every mkdocs.yaml file. This simplifies the usage as
      # e.g. styling plugins can be added once for all.
      # Make sure that the defined plugins are installed locally / in the Docker
      # image.
      # By default, only the techdocs-core plugin will be added (except if
      # omitTechdocsCorePlugin: true).
      defaultPlugins: [ 'techdocs-core' ]

  builder: 'local' # Alternatives - 'external'

  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

#  cache:
#    # Represents the number of milliseconds a statically built asset should
#    # stay cached. Cache invalidation is handled automatically by the frontend,
#    # which compares the build times in cached metadata vs. canonical storage,
#    # allowing long TTLs (e.g. 1 month/year)
#    ttl: 3600000
#
#    # (Optional) The time (in milliseconds) that the TechDocs backend will wait
#    # for a cache service to respond before continuing on as though the cached
#    # object was not found (e.g. when the cache service is unavailable). The
#    # default value is 1000
#    readTimeout: 500


auth:
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail

scaffolder:
# see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [ Component, System, API, Resource, Domain, Location, Group ]
  locations:
    - type: url
      target: https://github.com/vendic/.github/blob/master/backstage-catalog/groups/c-level-group.yaml
      rules:
        - allow: [ Group ]
  providers:
    githubOrg:
      id: production
      githubUrl: https://github.com
      orgs: [ 'Vendic' ]
      schedule:
        initialDelay: { seconds: 1 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }
    github:
      dot-github-repo:
        organization: 'Vendic'
        catalogPath: '/catalog-info.yaml'
        filters:
          branch: 'master'
          repository: '.github'
        schedule:
          frequency: { minutes: 35 }
          timeout: { minutes: 3 }
        validateLocationsExist: true
      backstage-application:
        organization: 'Vendic'
        catalogPath: '/catalog-info.yaml'
        filters:
          branch: 'main'
          repository: 'backstage-application'
        schedule:
          frequency: { minutes: 35 }
          timeout: { minutes: 3 }
        validateLocationsExist: true
      magento-shops:
        organization: 'Vendic'
        catalogPath: '/catalog-info.yaml'
        filters:
          branch: 'development'
          repository: '.*'
          topic:
            include: [ 'global-workflow' ]
        schedule:
          frequency: { minutes: 35 }
          timeout: { minutes: 3 }
        validateLocationsExist: true

sentry:
  organization: vendic

kubernetes:
  frontend:
    podDelete:
      enabled: true
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: ${K8S_CLUSTER}
          name: staging-doks-cluster
          title: 'Staging Kubernetes Cluster'
          authProvider: 'serviceAccount'
          caData: ${K8S_CONFIG_CA_DATA}
          serviceAccountToken: ${K8S_SERVICE_ACCOUNT_TOKEN_BACKSTAGE}
          dashboardUrl: http://127.0.0.1:8443
          dashboardApp: standard

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

devTools:
  info:
    packagePrefixes:
      - '@backstage-community/'
      - '@dweber019/backstage-plugin-simple-icons'
      - '@opentelemetry/'
      - '@roadiehq/'
      - '@spotify/'
  externalDependencies:
    endpoints:
      - name: 'Google'
        type: 'fetch'
        target: 'https://google.ca'
      - name: 'Google Public DNS'
        type: 'ping'
        target: '8.8.8.8'

search:
  collators:
    catalog:
      schedule:
        initialDelay: { seconds: 90 }
        frequency: { hours: 3 }
        timeout: { minutes: 3 }
    techdocs:
      schedule:
        initialDelay: { seconds: 90 }
        frequency: { seconds: 90 }
        timeout: { minutes: 3 }
  pg:
    highlightOptions:
      useHighlight: true # Used to enable to disable the highlight feature. The default value is true
      maxWord: 35 # Used to set the longest headlines to output. The default value is 35.
      minWord: 15 # Used to set the shortest headlines to output. The default value is 15.
      shortWord: 3 # Words of this length or less will be dropped at the start and end of a headline, unless they are query terms. The default value of three (3) eliminates common English articles.
      highlightAll: false # If true the whole document will be used as the headline, ignoring the preceding three parameters. The default is false.
      maxFragments: 0 # Maximum number of text fragments to display. The default value of zero selects a non-fragment-based headline generation method. A value greater than zero selects fragment-based headline generation (see the linked documentation above for more details).
      fragmentDelimiter: ' ... ' # Delimiter string used to concatenate fragments. Defaults to " ... ".
